generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls", "extendedWhereUnique"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id         Int       @id @default(autoincrement())
  title      String
  excerpt    String
  slug       String    @unique @default(dbgenerated("title"))
  createAt   DateTime  @default(now())
  content    String
  imageUrl   String
  updateAt   DateTime?
  author     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments   Comment[]
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  userId     Int
  likes      Like[]
}

model Like {
  id     Int   @id @default(autoincrement())
  like   Int?
  Post   Post? @relation(fields: [postId], references: [id])
  postId Int?
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  image String?
  Post  Post[]
}

model Comment {
  id       Int      @id @default(autoincrement())
  message  String
  Post     Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int?
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int?
  createAt DateTime @default(now())
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  Comment       Comment[]
  likes         Like[]
  admin         Boolean   @default(false)

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
